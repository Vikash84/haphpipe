#!/usr/bin/env bash

# Copyright (C) 2019 Matthew L. Bendall and (C) 2020 Keylie M. Gibson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


###############################################################################
# Example pipeline implementing amplicon assembly using a reference-based
# approach. Reads are error-corrected and aligned to provided amplicon
# reference with two refinement steps.
###############################################################################
SN=$(basename $0)


read -r -d '' USAGE <<EOF
USAGE:
$SN [read1] [read2] [amplicons_fasta] [samp_id] <outdir>

----- HAPHPIPE assembly pipeline 02 -----

This pipeline implements amplicon assembly using a reference-based approach.
Reads are error-corrected and aligned to provided amplicon reference with up to
five refinement steps.

Input:
read1:             Fastq file for read 1. May be compressed (.gz)
read2:             Fastq file for read 2. May be compressed (.gz)
amplicons_fasta:   Amplicon reference sequence (fasta)
samp_id:           Sample ID
outdir:            Output directory (default is sample_dir/$SN)

EOF

#--- Read command line args
[[ -n "$1" ]] && [[ "$1" == '-h' ]] && echo "$USAGE" && exit 0

[[ -n "$1" ]] && raw1="$1"
[[ -n "$2" ]] && raw2="$2"
[[ -n "$3" ]] && ampFA="$3"
[[ -n "$4" ]] && sampid="$4"
[[ -n "$5" ]] && outdir="$5"

[[ -z ${raw1+x} ]] && echo "FAILED: read1 is not set" && echo "$USAGE" && exit 1
[[ ! -e "$raw1" ]] && echo "[---$SN---] ($(date)) FAILED: file $raw1 does not exist" && exit 1

[[ -z ${raw2+x} ]] && echo "FAILED: read2 is not set" && echo "$USAGE" && exit 1
[[ ! -e "$raw2" ]] && echo "[---$SN---] ($(date)) FAILED: file $raw2 does not exist" && exit 1

[[ -z ${ampFA+x} ]] && echo "FAILED: ampFA is not set" && echo "$USAGE" && exit 1
[[ ! -e "$ampFA" ]] && echo "[---$SN---] ($(date)) FAILED: file $ampFA does not exist" && exit 1

[[ -z ${sampid+x} ]] && echo "FAILED: sampid is not set" && echo "$USAGE" && exit 1

[[ -z ${outdir+x} ]] && outdir=$(dirname $raw1)/$SN
mkdir -p $outdir

#--- Determine CPUs to use
# First examines NCPU environment variable, then nproc, finally sets to  1
[[ -n "$NCPU" ]] && ncpu=$NCPU
[[ -z $ncpu ]] && ncpu=$(nproc 2> /dev/null)
[[ -z $ncpu ]] && ncpu=1

#--- Determine whether verbose
[[ -n "$VERBOSE" ]] && quiet="" || quiet='--quiet'

echo "[---$SN---] ($(date)) read1:             $raw1"
echo "[---$SN---] ($(date)) read2:             $raw2"
echo "[---$SN---] ($(date)) reference_fasta:   $ampFA"
echo "[---$SN---] ($(date)) outdir:            $outdir"
echo "[---$SN---] ($(date)) num CPU:           $ncpu"

#--- Start the timer
t1=$(date +"%s")

###############################################################################
# Step 1: Trim reads.
###############################################################################
stage="trim_reads"
echo -e "\n[---$SN---] ($(date)) Stage: $stage"

if [[ -e $outdir/trimmed_1.fastq && -e ${outdir}/trimmed_2.fastq ]]; then
    echo "[---$SN---] ($(date)) EXISTS: $stage trimmed_1.fastq,trimmed_2.fastq"
else
    read -r -d '' cmd <<EOF
haphpipe trim_reads\
 --ncpu $ncpu\
 --fq1 $raw1\
 --fq2 $raw2\
 ${quiet} --logfile ${outdir}/haphpipe.out\
 --outdir ${outdir}
EOF
    echo -e "[---$SN---] ($(date)) $stage command:\n\n$cmd\n"
    eval $cmd

    [[ $? -eq 0 ]] && echo "[---$SN---] ($(date)) COMPLETED: $stage" || \
        (  echo "[---$SN---] ($(date)) FAILED: $stage" && exit 1 )
fi

###############################################################################
# Step 2: Error correction using Spades
###############################################################################
stage="ec_reads"
echo -e "\n[---$SN---] ($(date)) Stage: $stage"

if [[ -e $outdir/corrected_1.fastq && -e $outdir/corrected_2.fastq ]]; then
    echo "[---$SN---] ($(date)) EXISTS: $stage corrected_1.fastq,corrected_2.fastq"
else
    read -r -d '' cmd <<EOF
haphpipe ec_reads\
 --ncpu $ncpu\
 --fq1 ${outdir}/trimmed_1.fastq\
 --fq2 ${outdir}/trimmed_2.fastq\
 ${quiet} --logfile ${outdir}/haphpipe.out\
 --outdir ${outdir}
EOF
    echo -e "[---$SN---] ($(date)) $stage command:\n\n$cmd\n"
    eval $cmd

    [[ $? -eq 0 ]] && echo "[---$SN---] ($(date)) COMPLETED: $stage" || \
        (  echo "[---$SN---] ($(date)) FAILED: $stage" && exit 1 )
fi

###############################################################################
# Step 3: Refine assembly
###############################################################################
stage="refine_assembly"
echo -e "\n[---$SN---] ($(date)) Stage: $stage"

if [[ -e ${outdir}/refined.fna ]]; then
    echo "[---$SN---] ($(date)) EXISTS: $stage refined.fna"
else
    read -r -d '' cmd <<EOF
haphpipe refine_assembly\
 --ncpu $ncpu\
 --fq1 ${outdir}/corrected_1.fastq\
 --fq2 ${outdir}/corrected_2.fastq\
 --ref_fa ${ampFA}\
 --sample_id ${sampid}\
 --max_step 5\
 ${quiet} --logfile ${outdir}/haphpipe.out\
 --outdir ${outdir}
EOF
    echo -e "[---$SN---] ($(date)) $stage command:\n\n$cmd\n"
    eval $cmd

    [[ $? -eq 0 ]] && echo "[---$SN---] ($(date)) COMPLETED: $stage" || \
        (  echo "[---$SN---] ($(date)) FAILED: $stage" && exit 1 )
fi

###############################################################################
# Step 4: Finalize assembly
###############################################################################
stage="finalize_assembly"
echo -e "\n[---$SN---] ($(date)) Stage: $stage"

if [[ -e ${outdir}/final.fna && -e ${outdir}/final.bam && -e ${outdir}/final.vcf.gz ]]; then
    echo "[---$SN---] ($(date)) EXISTS: $stage final.fna,final.bam,final.vcf.gz"
else
    read -r -d '' cmd <<EOF
haphpipe finalize_assembly\
 --ncpu $ncpu\
 --fq1 ${outdir}/corrected_1.fastq\
 --fq2 ${outdir}/corrected_2.fastq\
 --sample_id ${sampid}\
 --ref_fa ${outdir}/refined.fna\
 ${quiet} --logfile ${outdir}/haphpipe.out\
 --outdir ${outdir}
EOF
    echo -e "[---$SN---] ($(date)) $stage command:\n\n$cmd\n"
    eval $cmd

    [[ $? -eq 0 ]] && echo "[---$SN---] ($(date)) COMPLETED: $stage" || \
        (  echo "[---$SN---] ($(date)) FAILED: $stage" && exit 1 )
fi


#---Complete job
t2=$(date +"%s")
diff=$(($t2-$t1))
echo "[---$SN---] ($(date)) $(($diff / 60)) minutes and $(($diff % 60)) seconds elapsed."
echo "[---$SN---] ($(date)) $SN COMPLETE."
